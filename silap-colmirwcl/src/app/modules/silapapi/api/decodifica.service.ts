/*
* SPDX-FileCopyrightText: Copyright 2024 | Regione Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Decodifica } from '../model/decodifica';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})

export class DecodificaService {


    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Restituisce le categorie azienda autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillCategoriaAzienda(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillCategoriaAzienda(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillCategoriaAzienda(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillCategoriaAzienda(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillCategoriaAzienda.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-categoria-azienda/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce i ccnl autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillCcnl(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillCcnl(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillCcnl(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillCcnl(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillCcnl.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-ccnl/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce i comuni autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillComune(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillComune(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillComune(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillComune(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillComune.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-comune/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce i d_statoVersamento autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillDStatoVersamento(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillDStatoVersamento(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillDStatoVersamento(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillDStatoVersamento(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillDStatoVersamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-esoDStatoVersamento/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce i d_versamento_motivo_sospensione autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillDVersamentoMotivoSospensione(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillDVersamentoMotivoSospensione(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillDVersamentoMotivoSospensione(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillDVersamentoMotivoSospensione(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillDVersamentoMotivoSospensione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-esoDVersamentoMotivoSospensione/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce le provincie autocomplete
     * 
     * @param txt 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillProvincia(txt: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public fillProvincia(txt: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public fillProvincia(txt: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public fillProvincia(txt: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (txt === null || txt === undefined) {
            throw new Error('Required parameter txt was null or undefined when calling fillProvincia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/fill-provincia/${encodeURIComponent(String(txt))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutte le categorie azienda
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCategoriaAzienda(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findCategoriaAzienda(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findCategoriaAzienda(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findCategoriaAzienda(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-categoria-azienda`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la categoria azienda
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCategoriaAziendaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findCategoriaAziendaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findCategoriaAziendaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findCategoriaAziendaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findCategoriaAziendaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-categoria-azienda/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutti i ccnl
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCcnl(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findCcnl(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findCcnl(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findCcnl(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-ccnl`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il ccnl
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCcnlById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findCcnlById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findCcnlById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findCcnlById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findCcnlById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-ccnl/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutti i comuni
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findComune(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findComune(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findComune(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findComune(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-comune`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il comune
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findComuneById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findComuneById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findComuneById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findComuneById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findComuneById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-comune/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il d_statoVersamento
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDStatoVersamentoById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findDStatoVersamentoById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findDStatoVersamentoById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findDStatoVersamentoById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findDStatoVersamentoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-esoDStatoVersamento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutti i d_versamento_motivo_sospensione
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDVersamentoMotivoSospensione(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findDVersamentoMotivoSospensione(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findDVersamentoMotivoSospensione(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findDVersamentoMotivoSospensione(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-esoDVersamentoMotivoSospensione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il d_versamento_motivo_sospensione
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDVersamentoMotivoSospensioneById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findDVersamentoMotivoSospensioneById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findDVersamentoMotivoSospensioneById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findDVersamentoMotivoSospensioneById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findDVersamentoMotivoSospensioneById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-esoDVersamentoMotivoSospensione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutti le provincia
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findProvincia(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findProvincia(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findProvincia(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findProvincia(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-provincia`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la provincia
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findProvinciaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Decodifica>;
    public findProvinciaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Decodifica>>;
    public findProvinciaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Decodifica>>;
    public findProvinciaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findProvinciaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Decodifica>(`${this.basePath}/decodifica/find-provincia/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce tutti i d_statoVersamento
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findfindDStatoVersamento(observe?: 'body', reportProgress?: boolean): Observable<Array<Decodifica>>;
    public findfindDStatoVersamento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Decodifica>>>;
    public findfindDStatoVersamento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Decodifica>>>;
    public findfindDStatoVersamento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Decodifica>>(`${this.basePath}/decodifica/find-esoDStatoVersamento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

