/*
* SPDX-FileCopyrightText: Copyright 2024 | Regione Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Azienda } from '../model/azienda';
import { FormRicercaVersamentoEsoneri } from '../model/formRicercaVersamentoEsoneri';
import { Messaggio } from '../model/messaggio';
import { Parametro } from '../model/parametro';
import { RicercaVersamentoEsoneriResponse } from '../model/ricercaVersamentoEsoneriResponse';
import { Versamento } from '../model/versamento';
import { VersamentoProvincia } from '../model/versamentoProvincia';
import { VersamentoPvPeriodo } from '../model/versamentoPvPeriodo';
import { VersamentoPvPeriodosResponse } from '../model/versamentoPvPeriodosResponse';
import { VersamentoStato } from '../model/versamentoStato';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})

export class VersamentoEsoneriService {


    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Batch per l&#x27;autorizzazione delle dichiarazioni di esoneo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public autorizzaDichiarazioniBatch(observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public autorizzaDichiarazioniBatch(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public autorizzaDichiarazioniBatch(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public autorizzaDichiarazioniBatch(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Messaggio>(`${this.basePath}/versamento-esoneri/autorizza-dichiarazioni-batch`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento con lo stato aggiornato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public autorizzaVersamento(body?: VersamentoStato, observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public autorizzaVersamento(body?: VersamentoStato, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public autorizzaVersamento(body?: VersamentoStato, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public autorizzaVersamento(body?: VersamentoStato, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Messaggio>(`${this.basePath}/versamento-esoneri/autorizza-versamento`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento
     * 
     * @param idProvincia 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancellaPeriodiProvincia(idProvincia: number, body?: Array<VersamentoPvPeriodo>, observe?: 'body', reportProgress?: boolean): Observable<VersamentoPvPeriodosResponse>;
    public cancellaPeriodiProvincia(idProvincia: number, body?: Array<VersamentoPvPeriodo>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VersamentoPvPeriodosResponse>>;
    public cancellaPeriodiProvincia(idProvincia: number, body?: Array<VersamentoPvPeriodo>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VersamentoPvPeriodosResponse>>;
    public cancellaPeriodiProvincia(idProvincia: number, body?: Array<VersamentoPvPeriodo>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idProvincia === null || idProvincia === undefined) {
            throw new Error('Required parameter idProvincia was null or undefined when calling cancellaPeriodiProvincia.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VersamentoPvPeriodosResponse>(`${this.basePath}/versamento-esoneri/cancella-periodi-provincia/${encodeURIComponent(String(idProvincia))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento
     * 
     * @param idProvincia 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancellaPeriodoAutomaticoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'body', reportProgress?: boolean): Observable<VersamentoPvPeriodosResponse>;
    public cancellaPeriodoAutomaticoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VersamentoPvPeriodosResponse>>;
    public cancellaPeriodoAutomaticoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VersamentoPvPeriodosResponse>>;
    public cancellaPeriodoAutomaticoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idProvincia === null || idProvincia === undefined) {
            throw new Error('Required parameter idProvincia was null or undefined when calling cancellaPeriodoAutomaticoProvincia.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VersamentoPvPeriodosResponse>(`${this.basePath}/versamento-esoneri/cancella-periodo-automatico-provincia/${encodeURIComponent(String(idProvincia))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento periodo
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancellaPeriodoProvincia(body?: VersamentoPvPeriodo, observe?: 'body', reportProgress?: boolean): Observable<VersamentoPvPeriodo>;
    public cancellaPeriodoProvincia(body?: VersamentoPvPeriodo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VersamentoPvPeriodo>>;
    public cancellaPeriodoProvincia(body?: VersamentoPvPeriodo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VersamentoPvPeriodo>>;
    public cancellaPeriodoProvincia(body?: VersamentoPvPeriodo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VersamentoPvPeriodo>(`${this.basePath}/versamento-esoneri/cancella-periodo-provincia`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Batch per la creazione delle posizioni debitorie
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkPosizioniDebitorieBatch(observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public checkPosizioniDebitorieBatch(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public checkPosizioniDebitorieBatch(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public checkPosizioniDebitorieBatch(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Messaggio>(`${this.basePath}/versamento-esoneri/check-posizioni-debitorie-batch`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Conferma e invia il versamento
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confermaInviaVersamento(body?: number, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public confermaInviaVersamento(body?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public confermaInviaVersamento(body?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public confermaInviaVersamento(body?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/conferma-invia`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confermaVersamentoProvincie(body?: number, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public confermaVersamentoProvincie(body?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public confermaVersamentoProvincie(body?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public confermaVersamentoProvincie(body?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/conferma-versamento-provincie`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public controlloModifica(body?: Versamento, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public controlloModifica(body?: Versamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public controlloModifica(body?: Versamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public controlloModifica(body?: Versamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/controllo-modifica`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Batch per la creazione delle posizioni debitorie
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public creazionePosizioniDebitorieBatch(observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public creazionePosizioniDebitorieBatch(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public creazionePosizioniDebitorieBatch(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public creazionePosizioniDebitorieBatch(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Messaggio>(`${this.basePath}/versamento-esoneri/creazione-posizioni-debitorie-batch`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Scarica il template per il batch previsione dichiarazioni
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadPrevisioneDichiarazioniTemplate(observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public downloadPrevisioneDichiarazioniTemplate(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public downloadPrevisioneDichiarazioniTemplate(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public downloadPrevisioneDichiarazioniTemplate(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Blob>(`${this.basePath}/versamento-esoneri/download-previsione-dichiarazioni-template`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce un VersamentoStato predisposto per l&#x27;inserimento
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNuovoVersamento(observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public getNuovoVersamento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public getNuovoVersamento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public getNuovoVersamento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Versamento>(`${this.basePath}/versamento-esoneri/nuovo-versamento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce un Parametro dato il codice
     * 
     * @param codParametro 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParametroByCod(codParametro: string, observe?: 'body', reportProgress?: boolean): Observable<Parametro>;
    public getParametroByCod(codParametro: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Parametro>>;
    public getParametroByCod(codParametro: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Parametro>>;
    public getParametroByCod(codParametro: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (codParametro === null || codParametro === undefined) {
            throw new Error('Required parameter codParametro was null or undefined when calling getParametroByCod.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Parametro>(`${this.basePath}/versamento-esoneri/parametro/${encodeURIComponent(String(codParametro))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il pdf del pagamento
     * 
     * @param idVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPdfAvvisoPagamento(idVersamento: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getPdfAvvisoPagamento(idVersamento: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getPdfAvvisoPagamento(idVersamento: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getPdfAvvisoPagamento(idVersamento: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idVersamento === null || idVersamento === undefined) {
            throw new Error('Required parameter idVersamento was null or undefined when calling getPdfAvvisoPagamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Blob>(`${this.basePath}/versamento-esoneri/get-pdf-avviso-pagamento/${encodeURIComponent(String(idVersamento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la posizione debitoria
     * 
     * @param idVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPosizioneDebitoria(idVersamento: string, observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public getPosizioneDebitoria(idVersamento: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public getPosizioneDebitoria(idVersamento: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public getPosizioneDebitoria(idVersamento: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idVersamento === null || idVersamento === undefined) {
            throw new Error('Required parameter idVersamento was null or undefined when calling getPosizioneDebitoria.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Messaggio>(`${this.basePath}/versamento-esoneri/get-posizione-debitoria/${encodeURIComponent(String(idVersamento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la dichiarazione versamento
     * 
     * @param idEsoTVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVersamento(idEsoTVersamento: number, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public getVersamento(idEsoTVersamento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public getVersamento(idEsoTVersamento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public getVersamento(idEsoTVersamento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEsoTVersamento === null || idEsoTVersamento === undefined) {
            throw new Error('Required parameter idEsoTVersamento was null or undefined when calling getVersamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Versamento>(`${this.basePath}/versamento-esoneri/get-versamento/${encodeURIComponent(String(idEsoTVersamento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamento periodo
     * 
     * @param idProvincia 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inserisciPeriodoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'body', reportProgress?: boolean): Observable<VersamentoPvPeriodo>;
    public inserisciPeriodoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VersamentoPvPeriodo>>;
    public inserisciPeriodoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VersamentoPvPeriodo>>;
    public inserisciPeriodoProvincia(idProvincia: number, body?: VersamentoPvPeriodo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idProvincia === null || idProvincia === undefined) {
            throw new Error('Required parameter idProvincia was null or undefined when calling inserisciPeriodoProvincia.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VersamentoPvPeriodo>(`${this.basePath}/versamento-esoneri/inserisci-periodo-provincia/${encodeURIComponent(String(idProvincia))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modificaDatiAziendali(body?: Versamento, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public modificaDatiAziendali(body?: Versamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public modificaDatiAziendali(body?: Versamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public modificaDatiAziendali(body?: Versamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/modifica-dati-aziendali`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modificaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public modificaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public modificaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public modificaGGLavorativiProvincia(body?: VersamentoProvincia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/modifica-gg-lavorativi-provincia`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param ripristina 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modificaSospensioniProvincia(ripristina: boolean, body?: VersamentoProvincia, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public modificaSospensioniProvincia(ripristina: boolean, body?: VersamentoProvincia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public modificaSospensioniProvincia(ripristina: boolean, body?: VersamentoProvincia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public modificaSospensioniProvincia(ripristina: boolean, body?: VersamentoProvincia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ripristina === null || ripristina === undefined) {
            throw new Error('Required parameter ripristina was null or undefined when calling modificaSospensioniProvincia.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/modifica-sospensioni-provincia/${encodeURIComponent(String(ripristina))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la dichiarazione versamento da modificare
     * 
     * @param idEsoTVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public modificaVersamento(idEsoTVersamento: number, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public modificaVersamento(idEsoTVersamento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public modificaVersamento(idEsoTVersamento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public modificaVersamento(idEsoTVersamento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEsoTVersamento === null || idEsoTVersamento === undefined) {
            throw new Error('Required parameter idEsoTVersamento was null or undefined when calling modificaVersamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Versamento>(`${this.basePath}/versamento-esoneri/modifica-versamento/${encodeURIComponent(String(idEsoTVersamento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce l&#x27;azienda da un codice fiscale
     * 
     * @param cf 
     * @param idVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ricercaAzienda(cf: string, idVersamento?: number, observe?: 'body', reportProgress?: boolean): Observable<Azienda>;
    public ricercaAzienda(cf: string, idVersamento?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Azienda>>;
    public ricercaAzienda(cf: string, idVersamento?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Azienda>>;
    public ricercaAzienda(cf: string, idVersamento?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cf === null || cf === undefined) {
            throw new Error('Required parameter cf was null or undefined when calling ricercaAzienda.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idVersamento !== undefined && idVersamento !== null) {
            queryParameters = queryParameters.set('idVersamento', <any>idVersamento);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Azienda>(`${this.basePath}/versamento-esoneri/ricerca-azienda/${encodeURIComponent(String(cf))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce i versamenti esoneri
     * 
     * @param page 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ricercaVersamentoEsoneri(page: number, body?: FormRicercaVersamentoEsoneri, observe?: 'body', reportProgress?: boolean): Observable<RicercaVersamentoEsoneriResponse>;
    public ricercaVersamentoEsoneri(page: number, body?: FormRicercaVersamentoEsoneri, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RicercaVersamentoEsoneriResponse>>;
    public ricercaVersamentoEsoneri(page: number, body?: FormRicercaVersamentoEsoneri, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RicercaVersamentoEsoneriResponse>>;
    public ricercaVersamentoEsoneri(page: number, body?: FormRicercaVersamentoEsoneri, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling ricercaVersamentoEsoneri.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RicercaVersamentoEsoneriResponse>(`${this.basePath}/versamento-esoneri/ricerca`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public salvaDatiAziendali(body?: Versamento, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public salvaDatiAziendali(body?: Versamento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public salvaDatiAziendali(body?: Versamento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public salvaDatiAziendali(body?: Versamento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/salva-dati-aziendali`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public salvaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public salvaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public salvaGGLavorativiProvincia(body?: VersamentoProvincia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public salvaGGLavorativiProvincia(body?: VersamentoProvincia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/salva-gg-lavorativi-provincia`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il versamenti esoneri salvato
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public salvaSospensioniProvincia(body?: VersamentoProvincia, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public salvaSospensioniProvincia(body?: VersamentoProvincia, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public salvaSospensioniProvincia(body?: VersamentoProvincia, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public salvaSospensioniProvincia(body?: VersamentoProvincia, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Versamento>(`${this.basePath}/versamento-esoneri/salva-sospensioni-provincia`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la stampa dei versamenti esoneri
     * 
     * @param body 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaRicercaVersamentoEsoneri(body?: FormRicercaVersamentoEsoneri, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaRicercaVersamentoEsoneri(body?: FormRicercaVersamentoEsoneri, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaRicercaVersamentoEsoneri(body?: FormRicercaVersamentoEsoneri, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaRicercaVersamentoEsoneri(body?: FormRicercaVersamentoEsoneri, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Blob>(`${this.basePath}/versamento-esoneri/stampa-ricerca`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce la stampa del versamento visualizzato
     * 
     * @param idEsoTVersamento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaVersamento(idEsoTVersamento: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaVersamento(idEsoTVersamento: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaVersamento(idEsoTVersamento: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaVersamento(idEsoTVersamento: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEsoTVersamento === null || idEsoTVersamento === undefined) {
            throw new Error('Required parameter idEsoTVersamento was null or undefined when calling stampaVersamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Blob>(`${this.basePath}/versamento-esoneri/stampa-versamento/${encodeURIComponent(String(idEsoTVersamento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restituisce il nuovo stato versamento modificato
     * 
     * @param idEsoTVersamento 
     * @param idDVersamentoStato 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatoVersamento(idEsoTVersamento: number, idDVersamentoStato: number, observe?: 'body', reportProgress?: boolean): Observable<Versamento>;
    public updateStatoVersamento(idEsoTVersamento: number, idDVersamentoStato: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Versamento>>;
    public updateStatoVersamento(idEsoTVersamento: number, idDVersamentoStato: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Versamento>>;
    public updateStatoVersamento(idEsoTVersamento: number, idDVersamentoStato: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEsoTVersamento === null || idEsoTVersamento === undefined) {
            throw new Error('Required parameter idEsoTVersamento was null or undefined when calling updateStatoVersamento.');
        }

        if (idDVersamentoStato === null || idDVersamentoStato === undefined) {
            throw new Error('Required parameter idDVersamentoStato was null or undefined when calling updateStatoVersamento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Versamento>(`${this.basePath}/versamento-esoneri/update-stato/${encodeURIComponent(String(idEsoTVersamento))}/${encodeURIComponent(String(idDVersamentoStato))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload il file xls per lanciare il batch previsione dichiarazioni
     * 
     * @param anno 
     * @param attachment 
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadPrevisioneDichiarazioni(anno?: string, attachment?: Array<string>, email?: string, observe?: 'body', reportProgress?: boolean): Observable<Messaggio>;
    public uploadPrevisioneDichiarazioni(anno?: string, attachment?: Array<string>, email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Messaggio>>;
    public uploadPrevisioneDichiarazioni(anno?: string, attachment?: Array<string>, email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Messaggio>>;
    public uploadPrevisioneDichiarazioni(anno?: string, attachment?: Array<string>, email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void | HttpParams; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (anno !== undefined) {
            formParams = formParams.append('anno', <any>anno) || formParams;
        }
        if (attachment) {
            attachment.forEach((element) => {
                formParams = formParams.append('attachment', <any>element) || formParams;
            })
        }
        if (email !== undefined) {
            formParams = formParams.append('email', <any>email) || formParams;
        }

        return this.httpClient.post<Messaggio>(`${this.basePath}/versamento-esoneri/upload-previsione-dichiarazioni`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

